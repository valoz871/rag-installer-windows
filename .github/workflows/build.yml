name: Build RAG Installer

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Build Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==5.13.2
        pip install Pillow>=10.0.0
        echo "Dependencies installed successfully"
    
    - name: Validate Source Files
      run: |
        echo "Validating source files..."
        
        if (Test-Path "smart_installer.py") {
          echo "smart_installer.py found"
          python -m py_compile smart_installer.py
          echo "smart_installer.py syntax OK"
        } else {
          echo "ERROR: smart_installer.py missing!"
          exit 1
        }
        
        echo "Source validation complete"
      shell: powershell
    
    - name: Build EXE with PyInstaller
      run: |
        echo "Building RAG Installer EXE..."
        
        pyinstaller `
          --onefile `
          --windowed `
          --name "RAG_Psicologia_Installer" `
          --hidden-import=tkinter `
          --hidden-import=tkinter.ttk `
          --hidden-import=tkinter.filedialog `
          --hidden-import=tkinter.messagebox `
          --optimize=2 `
          smart_installer.py
        
        if (Test-Path "dist/RAG_Psicologia_Installer.exe") {
          $fileSize = (Get-Item "dist/RAG_Psicologia_Installer.exe").Length / 1MB
          echo "EXE built successfully: $([math]::Round($fileSize, 2)) MB"
        } else {
          echo "ERROR: EXE build failed!"
          exit 1
        }
      shell: powershell
    
    - name: Test EXE Basic Functionality
      run: |
        echo "Testing built EXE..."
        
        $exe = "dist/RAG_Psicologia_Installer.exe"
        
        if (Test-Path $exe) {
          echo "EXE file exists and is accessible"
          $size = (Get-Item $exe).Length
          echo "File size: $size bytes"
          echo "EXE appears functional"
        } else {
          echo "ERROR: EXE not found!"
          exit 1
        }
      shell: powershell
    
    - name: Prepare Artifacts
      run: |
        echo "Preparing build artifacts..."
        
        # Create artifacts directory
        New-Item -ItemType Directory -Force -Path "build_output"
        
        # Copy main EXE
        Copy-Item "dist/RAG_Psicologia_Installer.exe" "build_output/"
        
        # Generate build info
        $buildInfo = @"
Build Information:
- Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
- Commit: $env:GITHUB_SHA
- Build: $env:GITHUB_RUN_NUMBER
- Branch: $env:GITHUB_REF_NAME
"@
        
        $buildInfo | Out-File -FilePath "build_output/build_info.txt" -Encoding UTF8
        
        echo "Artifacts prepared successfully"
        
        # List contents
        echo "Build output contents:"
        Get-ChildItem "build_output" | ForEach-Object {
          $size = if ($_.PSIsContainer) { "DIR" } else { "$([math]::Round($_.Length / 1KB, 1))KB" }
          echo "  $($_.Name) ($size)"
        }
      shell: powershell
    
    - name: Upload Installer EXE
      uses: actions/upload-artifact@v4
      with:
        name: RAG-Installer-EXE
        path: build_output/RAG_Psicologia_Installer.exe
        retention-days: 30
    
    - name: Upload Build Info
      uses: actions/upload-artifact@v4
      with:
        name: RAG-Installer-Info
        path: build_output/build_info.txt
        retention-days: 30
    
    - name: Build Summary
      run: |
        echo ""
        echo "=========================================="
        echo "BUILD COMPLETED SUCCESSFULLY"
        echo "=========================================="
        echo ""
        echo "Artifacts created:"
        echo "  - RAG_Psicologia_Installer.exe"
        echo "  - build_info.txt"
        echo ""
        echo "Download from Actions tab -> Artifacts"
        echo ""
      shell: powershell